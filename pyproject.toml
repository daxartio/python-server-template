[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "app"
version = "1.0.0"
requires-python = ">=3.12"
description = ""
authors = [ { name = "Your Name" }, { email = "email@example.com" } ]
keywords = []
dependencies = [
    "app-core",
    "fastapi-di",
    "fastapi-middlewares",
    "log",
    "asyncpg>=0.29.0,<0.30.0",
    "casers[pydantic]>=0.10.0,<0.11.0",
    "fastapi>=0.110.0,<0.111.0",
    "kontext>=1.3.0,<1.4.0",
    "orjson>=3.10.7,<3.11.0",
    "parol>=1.1.0,<1.2.0",
    "pydantic>=2,<3",
    "pydantic-settings>=2.0.1,<2.1.0",
    "pyjwt[crypto]>=2.9.0,<2.10.0",
    "SQLAlchemy[asyncio]>=2.0.34,<2.1.0",
    "typer>=0.12.5,<0.13.0",
    "uvicorn[standard]>=0.30.6,<0.31.0"
]

[project.optional-dependencies]

[dependency-groups]
dev = [
    "httpx >= 0.27.2",
    "mypy >= 1",
    "poethepoet >= 0.28",
    "pytest >= 8.3.2",
    "pytest-asyncio >= 0.24",
    "pytest-cov >= 5.0.0",
    "pytest-deadfixtures >= 2.2.1",
    "pytest-mock >= 3.14.0",
    "ruff >= 0.8",
]
migration = [
    "alembic >= 1.13.2",
    "psycopg2-binary >= 2.9.9",
]

[tool.uv.sources]
app-core = { workspace = true }
fastapi-di = { workspace = true }
fastapi-middlewares = { workspace = true }
log = { workspace = true }

[tool.uv.workspace]
members = ["packages/*"]

[tool.poe.env]
CODE = "tests app packages"

[tool.poe.tasks.all]
help = "Run format lint test"
sequence = ["format", "lint", "test"]
default_item_type = "ref"

[tool.poe.tasks.test]
help = "Test with coverage"
cmd = "pytest -vv --cov=./"

[tool.poe.tasks.test-fast]
help = "Test until error"
cmd = "pytest -vv --exitfirst"

[tool.poe.tasks.test-failed]
help = "Test failed"
cmd = "pytest -vv --last-failed"

[tool.poe.tasks.test-report]
help = "Report testing"
sequence = [
    {cmd = "pytest -vv --cov --cov-report html"},
    {cmd = "python -m webbrowser 'htmlcov/index.html'"},
]

[tool.poe.tasks.lint]
help = "Check code"
sequence = [
    {cmd = "mypy ${CODE}"},
    {cmd = "ruff check ${CODE}"},
    {cmd = "pytest --dead-fixtures --dup-fixtures"},
]

[tool.poe.tasks.format]
help = "Formating code"
sequence = [
	{cmd = "ruff format ${CODE}"},
]

[tool.poe.tasks.migrate]
help = "Run the migration"
cmd = "alembic upgrade head"

[tool.poe.tasks.migration]
help = "Create new migration"
args   = [{ name = "message", positional = true, required = true }]
cmd = "alembic revision --autogenerate --message ${message}"

[tool.poe.tasks.cli]
help = "CLI"
cmd = "python -m app"

[tool.poe.tasks.run]
help = "Run"
cmd = "python -m app server up"

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
plugins = ["pydantic.mypy"]

[tool.coverage.run]
omit = ["tests/*", "**/__main__.py", "**/.venv/*", "**/site-packages/*"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 100

[tool.pytest.ini_options]
asyncio_mode = "strict"
addopts = "--strict-markers --showlocals --verbosity 2"
log_level = "DEBUG"

[tool.ruff.lint]
select = []
ignore = []
exclude = []

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
