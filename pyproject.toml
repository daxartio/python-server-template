[tool.poetry]
name = "app"
version = "1.0.0"
description = ""
authors = ["Your Name <email@gmail.com>"]
license = "MIT"
readme = "README.md"
keywords = []

[tool.poetry.dependencies]
python = "^3.12"

app-core = { path = "packages/app-core" }
fastapi-di = { path = "packages/fastapi-di" }
fastapi-middlewares = { path = "packages/fastapi-middlewares" }
log = { path = "packages/log" }

asyncpg = "^0.29.0"
casers = { version = "^0.8.0", extras = ["pydantic"] }
fastapi = "^0.110.0"
kontext = "^1.3.0"
orjson = "^3.10.7"
parol = "^1.1.0"
pydantic = "^2"
pydantic-settings = "^2.0.1"
pyjwt = { version = "^2.9.0", extras = ["crypto"] }
SQLAlchemy = { version = "^2.0.34", extras = ["asyncio"] }
typer = "^0.12.5"
uvicorn = { version = "^0.30.6", extras = ["standard"] }

[tool.poetry.group.dev.dependencies]
black = ">=24"
httpx = "^0.27.2"
mypy = "^1.11.2"
poethepoet = "^0.28"
pytest = "^8"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-deadfixtures = "*"
pytest-mock = "*"
ruff = "^0.6.4"

[tool.poetry.group.migration.dependencies]
alembic = "^1.13.2"
psycopg2-binary = "^2.9.9"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poe.env]
CODE = "tests app packages"

[tool.poe.tasks.all]
help = "Run format lint test"
sequence = ["format", "lint", "test"]
default_item_type = "ref"

[tool.poe.tasks.test]
help = "Test with coverage"
cmd = "pytest -vv --cov=./"

[tool.poe.tasks.test-fast]
help = "Test until error"
cmd = "pytest -vv --exitfirst"

[tool.poe.tasks.test-failed]
help = "Test failed"
cmd = "pytest -vv --last-failed"

[tool.poe.tasks.test-report]
help = "Report testing"
sequence = [
    {cmd = "pytest -vv --cov --cov-report html"},
    {cmd = "python -m webbrowser 'htmlcov/index.html'"},
]

[tool.poe.tasks.lint]
help = "Check code"
sequence = [
    {cmd = "mypy ${CODE}"},
    {cmd = "ruff check ${CODE}"},
    {cmd = "black --check ${CODE}"},
    {cmd = "pytest --dead-fixtures --dup-fixtures"},
]

[tool.poe.tasks.format]
help = "Formating code"
sequence = [
	{cmd = "ruff format ${CODE}"},
	{cmd = "black ${CODE}"},
]

[tool.poe.tasks.migrate]
help = "Run the migration"
cmd = "alembic upgrade head"

[tool.poe.tasks.migration]
help = "Create new migration"
args   = [{ name = "message", positional = true, required = true }]
cmd = "alembic revision --autogenerate --message ${message}"

[tool.poe.tasks.cli]
help = "CLI"
cmd = "python -m app"

[tool.poe.tasks.run]
help = "Run"
cmd = "python -m app server up"

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
plugins = ["pydantic.mypy"]

[tool.isort]
profile = "black"

[tool.coverage.run]
omit = ["tests/*", "**/__main__.py", "**/.venv/*", "**/site-packages/*"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 100

[tool.black]
skip-string-normalization = true

[tool.pytest.ini_options]
asyncio_mode = "strict"
addopts = "--strict-markers --showlocals --verbosity 2"
log_level = "DEBUG"

[tool.ruff.lint]
select = []
ignore = []
exclude = []

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]
