[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.description }}"
authors = ["{{ cookiecutter.author }}"]
license = "MIT"
readme = "README.md"
repository = "{{ cookiecutter.repository }}"
homepage = "{{ cookiecutter.homepage }}"
keywords = []

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_version }}"
asyncpg = "^0.27.0"
fastapi = "^0.89.1"
gunicorn = "^20.1.0"
orjson = "^3.8.3"
pydantic = "^1.10.2"
SQLAlchemy = {extras = ["asyncio"], version = "^1.4.36"}
uvicorn = {extras = ["standard"], version = "^0.17.6"}

[tool.poetry.group.dev.dependencies]
black = "*"
codecov = "*"
mypy = "*"
poethepoet = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-deadfixtures = "*"
pytest-mock = "*"
ruff = "*"
toml = "*"
{% if cookiecutter.use_docs == 'True' %}
[tool.poetry.group.docs.dependencies]
mkdocs = "*"
mkdocs-material = "*"
{% endif %}
[tool.poetry.group.migration.dependencies]
alembic = "^1.9.1"
psycopg2-binary = "^2.9.5"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poe.env]
CODE = "tests {{ cookiecutter.app_name }}"

[tool.poe.tasks.all]
help = "Run format lint test"
sequence = ["format", "lint", "test"]
default_item_type = "ref"

[tool.poe.tasks.test]
help = "Test with coverage"
cmd = "pytest --cov=./"

[tool.poe.tasks.test-fast]
help = "Test until error"
cmd = "pytest --exitfirst"

[tool.poe.tasks.test-failed]
help = "Test failed"
cmd = "pytest --last-failed"

[tool.poe.tasks.test-report]
help = "Report testing"
sequence = [
    {cmd = "pytest --cov --cov-report html"},
    {cmd = "python -m webbrowser 'htmlcov/index.html'"},
]

[tool.poe.tasks.lint]
help = "Check code"
sequence = [
    {cmd = "ruff ${CODE}"},
    {cmd = "black --check ${CODE}"},
    {cmd = "pytest --dead-fixtures --dup-fixtures"},
    {cmd = "mypy ${CODE}"},
]

[tool.poe.tasks.format]
help = "Formating code"
sequence = [
	{cmd = "ruff --fix-only ${CODE}"},
	{cmd = "black ${CODE}"},
]
{% if cookiecutter.use_docs == 'True' %}
[tool.poe.tasks.docs]
help = "Build docs"
cmd = "mkdocs build -s -v"

[tool.poe.tasks.docs-serve]
help = "Serve docs"
cmd = "mkdocs serve"
{% endif %}
[tool.poe.tasks.docs-changelog]
help = "Build changelog"
cmd = "git-changelog -s conventional -o CHANGELOG.md ."

[tool.poe.tasks.update-changelog]
help = "Update changelog (commit)"
sequence = [
    {ref = "docs-changelog"},
    {cmd = "git add ."},
    {cmd = "git commit -m \"docs: update changelog\""},
]

[tool.poe.tasks.bump-version]
help = "Bump version (commit and tag)"
args = [{name = "version", positional = true, required = true}]
sequence = [
    {cmd = "poetry version ${version}"},
    {cmd = "git add ."},
    {cmd = "git commit -m \"Bump version ${version}\""},
    {cmd = "git tag -m \"\" -a ${version}"},
    {ref = "update-changelog"},
]

[tool.poe.tasks.clean]
help = "Clean"
sequence = [
	{cmd = "rm -rf site || true"},
	{cmd = "rm -rf dist || true"},
	{cmd = "rm -rf htmlcov || true"},
]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.coverage.run]
omit = ["tests/*", "**/__main__.py", "**/.venv/*", "**/site-packages/*"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 100

[tool.black]
skip-string-normalization = true

[tool.pytest.ini_options]
asyncio_mode = "strict"
addopts = "--strict-markers --showlocals --verbosity 2"
log_level = "DEBUG"

[tool.ruff]
line-length = 88
select = [
    "D",
    "B",
    "C",
    "E",
    "F",
    "N",
    "Q",
    "RUF001",
    "T",
    "W",
]
ignore = [
    "Q000",
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D203",
    "D213",
    "B008",
]
exclude = []
